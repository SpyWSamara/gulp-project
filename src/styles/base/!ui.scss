@import '../config';
@import '../partials';

/* UI */

$input-size: round($input-font-size * $input-factor);
$input-height: $input-font-size * $line-height + nth($input-padding, 1) * 2 + $input-border-width * 2;

$switcher-width: $input-size * $switcher-width-factor;
$switcher-x: $input-size * (1 - $switcher-dot-factor) / 2;
$switcher-x-active: $input-size * ($switcher-width-factor * 2 - $switcher-dot-factor - 1) / 2;
$switcher-y: $input-size * (1 - $switcher-dot-factor) / 2;

$select-angle-size: $input-height * $select-angle-factor;
$select-angle-real-size: $select-angle-size * sin(45deg) + $select-angle-size * cos(45deg);
$select-angle-position: $select-angle-real-size / 2;

$button-padding-y: nth($input-padding, 1) - ($button-border-width - $input-border-width);
$button-padding-x: nth($input-padding, 2) - ($button-border-width - $input-border-width);

$button-padding-y-small: round($button-padding-y * nth($button-ratio-small, 1));
$button-padding-x-small: round($button-padding-x * nth($button-ratio-small, 2));

$button-padding-y-normal: round($button-padding-y * nth($button-ratio-normal, 1));
$button-padding-x-normal: round($button-padding-x * nth($button-ratio-normal, 2));

$button-padding-y-large: round($button-padding-y * nth($button-ratio-large, 1));
$button-padding-x-large: round($button-padding-x * nth($button-ratio-large, 2));

input[type="text"],
input[type="tel"],
input[type="email"],
input[type="number"],
textarea,
button {
    appearance: none;
    outline: 0!important;
    box-shadow: none!important;
}

input[type="text"],
input[type="tel"],
input[type="email"],
input[type="number"],
textarea {
    @include autofill() {
        box-shadow: 0 0 0 30px white inset !important;
    }

    &:focus {
        border-color: $primary;
    }

    @include placeholder() {
        color: $placeholder-color;
    }

    .js-focus & {
        @include placeholder() {
            color: transparent;
        }
    }
}

input[type="text"],
input[type="tel"],
input[type="email"],
input[type="number"],
textarea,
.select__input,
.select__dropdown {
    width: 100%;
    max-width: 100%;
    font-size: $input-font-size;
    padding: $input-padding;
    border-radius: $input-radius;
    border: $input-border-width solid $input-border-color;
    @include transition(border-color);

    @include mo(xs) {
        padding-left: round(nth($input-padding, 2) * $input-padding-xs-factor);
        padding-right: round(nth($input-padding, 2) * $input-padding-xs-factor);
    }
}

input[type="number"] {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
        appearance: none;
        margin: 0;
    }
}

textarea {
    min-height: $textarea-height;
}

label {
    max-width: 100%;
    display: inline-block;
    margin-bottom: $form-gutter / 2;
}

input[type="checkbox"],
input[type="radio"],
input[type="file"],
select {
    visibility: hidden;
    display: none;
}

input[type="checkbox"],
input[type="radio"] {
    & + label {
        position: relative;
        cursor: pointer;
        padding-left: $input-size * $input-offset-factor;
        margin-bottom: 0;

        &:before, &:after {
            position: absolute;
            top: ($input-font-size * $line-height - $input-size) / 2;
            left: 0;
            @include transition();
        }

        &:before {
            content: '';
            border: $input-border-width solid $border;
            border-radius: $input-radius / 2;
            width: $input-size;
            height: $input-size;
            display: inline-flex;
            vertical-align: middle;
        }

        &:after {
            content: '';
            display: block;
            opacity: 0;
            @include transition();
        }
    }

    &:checked {
        & + label {
            &:after {
                opacity: 1;
            }
        }

        &.switch {
            & + label {
                &:before {
                    background: $switcher-active-bg;
                }
                &:after {
                    background: $switcher-active-color;
                    transform: translate($switcher-x-active, $switcher-y);
                }
            }
        }
    }

    &:disabled {
        & + label {
            opacity: .35;
            pointer-events: none;
        }
    }
}

input[type="checkbox"] {
    & + label {
        &:after {
            width: round($input-size / 4);
            height: round($input-size / 2);
            transform-origin: 50% 50%;
            border: solid $checkbox-color;
            border-width: 0 $checkbox-thickness $checkbox-thickness 0;
            transform: rotate(45deg) translate($input-size / 2.5, -$input-size / 8);
        }
    }
    &:checked {
        & + label {
            &:before {
                border-color: $checkbox-color;
            }
        }
    }

    &.switch {
        & + label {
            display: inline-block;
            padding-left: $input-size * ($input-offset-factor + 1);

            &:before {
                width: $switcher-width;
                background: $switcher-bg;
                border-radius: $input-size;
                border-color: $switcher-border-color;
            }

            &:after {
                opacity: 1;
                width: $input-size * $switcher-dot-factor;
                height: $input-size * $switcher-dot-factor;
                border: 0;
                border-radius: 50%;
                background: $switcher-color;
                transform: translate($switcher-x, $switcher-y);
            }
        }

        &:checked {
            & + label {
                &:before {
                    border-color: $switcher-active-border-color;
                }
            }
        }
    }
}

input[type="radio"] {
    & + label {
        &:after {
            width: $input-size * $radio-factor;
            height: $input-size * $radio-factor;
            border-radius: 50%;
            background: $radio-color;
            transform: translate($input-size / 4, $input-size / 4);
        }
        &:before {
            border-radius: 50%;
        }
    }

    &:checked {
        & + label {
            &:before {
                border-color: $radio-color;
            }
        }
    }

    &:disabled {
        & + label {
            opacity: .35;
            pointer-events: none;
        }
    }
}

input[type="file"] {
    & + label {
        width: auto;
        border: $input-border-width solid $input-border-color;
        padding: $input-padding;
        border-radius: $input-radius;
        cursor: pointer;
        margin: 0;
        @include truncate();
        @include transition(border-color);

        @include mo(xs) {
            padding-left: round(nth($input-padding, 2) * $input-padding-xs-factor);
            padding-right: round(nth($input-padding, 2) * $input-padding-xs-factor);
        }
    }

    .is-focused &,
    .is-checked & {
        & + label {
            border-color: $primary;
        }
    }

    .is-checked & {
        & + label {
            color: $primary;
        }
    }
}

.js-focus {
    label {
        position: absolute;
        top: nth($input-padding, 1) + $input-border-width;
        left: nth($input-padding, 2) + $input-border-width;
        transition: font-size .15s ease-in-out, top .15s ease-in-out;
        margin-bottom: 0;

        @include mo(xs) {
            left: round(nth($input-padding, 2) * $input-padding-xs-factor) + $input-border-width;
        }
    }

    &.is-focused,
    &.is-checked {

        label {
            top: nth($input-padding, 1) / 2;
            font-size: $input-font-size * 0.6;
        }

        input,
        textarea {
            padding: nth($input-padding, 1) * 1.5 nth($input-padding, 2) nth($input-padding, 1) / 2;

            @include mo(xs) {
                padding-left: round(nth($input-padding, 2) * $input-padding-xs-factor);
                padding-right: round(nth($input-padding, 2) * $input-padding-xs-factor);
            }
        }
    }
}

.select {
    $this: &;

    position: relative;
    width: $select-width;
    max-width: 100%;

    @include mo(xs) {
        width: 100%;
    }

    &__element,
    &__input {
        width: 100%;
    }

    &__element {
        position: absolute;
        top: 0;
        left: 0;
        height: $input-height;
        appearance: none;
        opacity: 0;

        @include mo(xs) {
            display: block;
            visibility: visible;
            z-index: 2;
        }
    }

    &__input {
        position: relative;
        color: $placeholder-color;
        padding-right: $select-angle-size + nth($input-padding, 2) * 2!important;
        cursor: pointer;
        z-index: 1;
        @include truncate();
        @include transition();

        &:after {
            content: '';
            width: $select-angle-size;
            height: $select-angle-size;
            position: absolute;
            top: calc(50% - #{$select-angle-real-size / 2 - $input-border-width});
            right: nth($input-padding, 2);
            border: solid $select-angle-color;
            border-width: 0 $select-angle-border-width $select-angle-border-width 0;
            display: block;
            transform: rotate(45deg);
            transform-origin: $select-angle-position $select-angle-position;
            @include transition();
        }

        #{$this}.is-focused &,
        #{$this}.is-opened & {
            color: $primary;
            border-color: $select-color;

            &:after {
                border-color: $select-color;
                transform: rotate(-135deg);
                top: ($input-height - $select-angle-real-size - $select-angle-border-width) / 2;
            }
        }

        #{$this}.is-checked & {
            color: $white;
            background: $select-color;
            border-color: $select-color;

            &:after {
                border-color: $white;
            }
        }
    }

    &__dropdown {
        display: none;
        padding: 0;
        position: absolute;
        top: 125%;
        left: 0;
        background: $white;
        height: auto;
        max-height: $select-dropdown-height;
        opacity: 0;
        z-index: 2;
        border: $select-dropdown-border solid $select-dropdown-border-color;
        box-shadow: $select-dropdown-shadow;
        @include transition(opacity);

        #{$this}.is-opened & {
            display: block;
            animation: fadeIn .15s ease-in-out forwards;
        }

        @include mo(xs) {
            display: none;
        }
    }

    &__item {
        display: block;
        color: $text;
        padding: nth($input-padding, 1) * nth($select-item-ratio, 1) nth($input-padding, 2) * nth($select-item-ratio, 2);
        cursor: pointer;
        @include transition(color, background);

        @include mo(xs) {
            padding-left: round(nth($input-padding, 2) * $input-padding-xs-factor);
            padding-right: round(nth($input-padding, 2) * $input-padding-xs-factor);
        }

        @include hover() {
            background: $select-hover-item-bg;
            color: $select-hover-item-color;
        }

        &.is-active {
            background: $select-active-item-bg;
            color: $select-active-item-color;
        }
    }
}

.btn {
    display: inline-block;
    font-size: $button-font-size;
    font-weight: $button-font-weight;
    text-align: center;
    text-shadow: $button-text-shadow;
    text-decoration: none!important;
    outline: 0 !important;
    padding: $button-padding-y-normal $button-padding-x-normal;
    border: $button-border-width solid;
    border-radius: $button-radius;
    box-shadow: $button-shadow;

    &:focus {
        box-shadow: none!important;
    }

    @include mo(xs) {
        width: 100%;
        padding-left: $button-padding-x-normal * $button-padding-xs-factor;
        padding-right: $button-padding-x-normal * $button-padding-xs-factor;
    }

    @mixin button-bg($type, $color) {
        color: $button-text;
        background: $color;
        border-color: $color;

        @include hover() {
            color: $button-text;
            background: lighten($color, $button-hover-depth);
            border-color: lighten($color, $button-hover-depth);
        }
    };

    @each $type, $color in $colors {
        @if $color == $primary {
            @include button-bg($type, $color);
        } @else {
            &--#{$type} {
                @include button-bg($type, $color);
            }
        }
    }

    &--light {
        color: $text;
        background: lighten($primary, 55%);
        border-color: lighten($primary, 55%);
        text-shadow: none;

        @include hover() {
            color: $text;
            background: lighten($primary, 57%);
            border-color: lighten($primary, 57%);
        }
    }

    &--white,
    &--border {
        color: $primary;
        background: $white;

        @include hover() {
            color: $white;
            background: lighten($primary, $button-hover-depth);
        }
    }

    &--white {
        text-shadow: none;
    }

    &--round {
        border-radius: $button-radius * $button-round-factor;
        padding-left: $button-padding-x-normal * nth($button-ratio-round, 2);
        padding-right: $button-padding-x-normal * nth($button-ratio-round, 2);
    }

    &--square {
        border-radius: 0;
    }

    &--small {
        padding: $button-padding-y-small $button-padding-x-small;

        &.btn--round {
            padding-left: $button-padding-x-small * nth($button-ratio-round, 2);
            padding-right: $button-padding-x-small * nth($button-ratio-round, 2);
        }
    }

    &--large {
        padding: $button-padding-y-large $button-padding-x-large;

        &.btn--round {
            padding-left: $button-padding-x-large * nth($button-ratio-round, 2);
            padding-right: $button-padding-x-large * nth($button-ratio-round, 2);
        }
    }

    &--disabled {
        opacity: $disabled-opacity;
        filter: grayscale(1);
        pointer-events: none;
    }

    .form__group & {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-height: $input-height;
    }
}
